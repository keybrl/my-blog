<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text">KeybrL's Blog</title>
    <generator>MkDocs v1.0.3</generator>
    <id>https://blog.keybrl.com/</id>
    <link href="https://blog.keybrl.com/" rel="alternate" type="text/html"/>
    <link href="https://blog.keybrl.com/feed.xml" rel="self" type="application/rss+xml"/>
    <author>
        <name>KeybrL</name>
        <email>keyboard-l@outlook.com</email>
    </author>
    <rights type="html">Copyright &amp;copy; &lt;a href="https://blog.keybrl.com/">KeybrL&lt;/a> All Rights Reserved.</rights>
    <updated>2019-02-23T00:00:02+08:00</updated>

    <entry>
        <title>软路由与NAS(3) - 外壳</title>
        <link rel="alternate" type="text/html" title="软路由与NAS(3) - 外壳" href="http://blog.keybrl.com/boring/2019-02-22-router3_shell.html"/>
        <id>http://blog.keybrl.com/boring/2019-02-22-router3_shell.html</id>
        <updated>2019-02-23T00:00:01+08:00</updated>
        <published>2019-02-23T00:00:00+08:00</published>
        <summary></summary>
        <content type="html" xml:base="http://blog.keybrl.com/boring/2019-02-22-router3_shell.html">&lt;h1 id="nas3-">软路由与NAS(3) - 外壳&lt;/h1>
&lt;p>2018年秋冬之交（双十一前后），用工控主板搭了一个软路由和 NAS ，详见这两篇文章 &lt;a href="./2018-11-02-router1_hardware.md">软路由与NAS(1) - 硬件平台搭建&lt;/a> 和 &lt;a href="./2019-02-18-router2_software.md">软路由与NAS(2) - 软件平台搭建&lt;/a>&lt;/p>
&lt;p>当时刚弄好是这个样子的&lt;/p>
&lt;p>&lt;img alt="full9" src="//blog-assets.keybrl.com/images/router/full9.jpg" />&lt;/p>
&lt;p>可以看到硬盘单独放置在旁边，十分不美观，而且零零散散不容易移动，还很容易积灰。于是寻思着要给他搞一个机箱&lt;/p>
&lt;p>虽然这块板子说是 “Nano-ITX” ，但是一查好像也就是个概念，并没有什么统一的标准，所以自然也买不到刚好合适的机箱。然后我开始想能不能自己做一个机箱，首先我想到的是亚克力板。但是亚克力很硬，一般人用一般的工具很难精确加工，去查某宝，有定制切割亚克力的服务&lt;/p>
&lt;p>&lt;img alt="full9" src="//blog-assets.keybrl.com/images/router/ykl.jpg" />&lt;/p>
&lt;p>但是定制就意味着我必须提前设计好，而我更希望是一边做一边想，而且我也不知道商家能够做到的多高的精度，万一最后到货发现差一些，装不上，那就不好了。排除了这个之后我搜了我能想到的所有材料，看看供应商们能给我一些什么解决方案。最后我感觉还是木板容易一些，据说用裁纸刀就能切，而且我感觉也算是比较好看，木头具有一定的弹性，木板之间嵌合的宽容度就比较高。&lt;/p>
&lt;p>随便估算了一下用量，买回来十张这样 3mm 厚的椴木层板&lt;/p>
&lt;p>&lt;img alt="shell1" src="//blog-assets.keybrl.com/images/router/shell1.jpg" />&lt;/p>
&lt;p>&lt;img alt="shell2" src="//blog-assets.keybrl.com/images/router/shell2.jpg" />&lt;/p>
&lt;p>图中的小裁纸刀和铅笔尺子也是主要的加工工具。&lt;/p>
&lt;p>主要的加工方法就是画好线，然后拿裁纸刀慢慢划开，根据力道不同，要划十几到几十下才能划透，从两面往中间划比从一面划穿到另一面要容易一点，还是相当累的。除了裁纸刀，我也有一些辅助工具&lt;/p>
&lt;p>&lt;img alt="shell3" src="//blog-assets.keybrl.com/images/router/shell3.jpg" />&lt;/p>
&lt;p>一个小小的电钻，可以装锯片、麻花钻头、磨砂轮之类的东西，加工木板还是比较容易的，只是不太容易操控，抖动什么的误差也很大，所以精细的还是要用裁纸刀&lt;/p>
&lt;p>然后先讲讲设计吧&lt;/p>
&lt;p>首先考虑的是最外面6块板（如果做成四棱柱的话）如何固定，我不想使用螺丝什么的，所以就用了一种小时候拼插玩具很喜欢用的结构，我也不知道如何形容，看图&lt;/p>
&lt;p>&lt;img alt="shell4" src="//blog-assets.keybrl.com/images/router/shell4.jpg" />&lt;/p>
&lt;p>插入、横着移一下就能卡住。&lt;/p>
&lt;p>他们被设计为这样的方向：左右两块是往下移动锁死，这样只要不让左右两块往上移动就可以了，于是底板往后移动锁死左右两块板，上板往左移动锁死前后两块板，这样只要不水平推动上下两块板，整个结构就不会散。而且这些拼插结构加工得也是比较紧的，不容易松动。&lt;/p>
&lt;p>&lt;img alt="shell5" src="//blog-assets.keybrl.com/images/router/shell5.jpg" />&lt;/p>
&lt;p>&lt;img alt="shell6" src="//blog-assets.keybrl.com/images/router/shell6.jpg" />&lt;/p>
&lt;p>&lt;img alt="shell7" src="//blog-assets.keybrl.com/images/router/shell7.jpg" />&lt;/p>
&lt;p>然后再考虑内部的结构。首先我需要他能放下一个3.5寸硬盘，为此我买了一个台式机箱的光驱位硬盘架。&lt;/p>
&lt;p>&lt;img alt="shell8" src="//blog-assets.keybrl.com/images/router/shell8.jpg" />&lt;/p>
&lt;p>&lt;img alt="shell9" src="//blog-assets.keybrl.com/images/router/shell9.jpg" />&lt;/p>
&lt;p>那为了不头重脚轻，应该是硬盘架和硬盘在下面，上面放主板，为了固定方便，中间用木板间隔。大概像这样&lt;/p>
&lt;p>&lt;img alt="shell10" src="//blog-assets.keybrl.com/images/router/shell10.jpg" />&lt;/p>
&lt;p>因为主板比硬盘架小很多，所以，主板必然不能前后两侧都靠边，于是我选择让主板上接口比较多的一侧靠边。但是正面还有4个 USB 接口啊，总不能浪费了吧，于是我买了3根延长线（两根 USB3.0 ，一根双头 USB2.0 ，没办法，找不到规格统一的 USB3.0 和 USB2.0 延长线），把他们延长到后面。大概就这样， USB2.0 延长线从主板下方 CPU 散热器边上过，两个 USB3.0 从主板上方过&lt;/p>
&lt;p>（其实正面还有一个很像网线接口的接口是串口，不重要，所以没有做处理）&lt;/p>
&lt;p>&lt;img alt="shell11" src="//blog-assets.keybrl.com/images/router/shell11.jpg" />&lt;/p>
&lt;p>因为机箱比较封闭，原来的被动散热看起来也不是很行，于是选择在 CPU 下方的隔板挖个洞放个 8cm 的风扇，风扇是卡在那的，并没有什么胶水、螺丝。隔板上还有一个小洞是用来通下面硬盘的 SATA 和电源线的。&lt;/p>
&lt;p>&lt;img alt="shell12" src="//blog-assets.keybrl.com/images/router/shell12.jpg" />&lt;/p>
&lt;p>背板按照主板上的接口挖有洞，侧板右2左1共3个洞用来固定天线。&lt;/p>
&lt;p>&lt;img alt="shell13" src="//blog-assets.keybrl.com/images/router/shell13.jpg" />&lt;/p>
&lt;p>&lt;img alt="shell14" src="//blog-assets.keybrl.com/images/router/shell14.jpg" />&lt;/p>
&lt;p>正面挖有一个硬盘架开口的洞，一个固定电源按钮的洞&lt;/p>
&lt;p>&lt;img alt="shell15" src="//blog-assets.keybrl.com/images/router/shell15.jpg" />&lt;/p>
&lt;p>还有一些适当位置的螺丝孔用来固定内部部件。&lt;/p>
&lt;p>下面看一下装配过程吧&lt;/p>
&lt;p>将天线馈线、电源开关固定到相应的洞上&lt;/p>
&lt;p>&lt;img alt="shell16" src="//blog-assets.keybrl.com/images/router/shell16.jpg" />&lt;/p>
&lt;p>嵌好侧板、背板、中间隔板&lt;/p>
&lt;p>&lt;img alt="shell17" src="//blog-assets.keybrl.com/images/router/shell17.jpg" />&lt;/p>
&lt;p>用螺丝固定好 USB 延长线、固定主板的铜柱，固定好风扇，将 SATA 和硬盘电源线穿好&lt;/p>
&lt;p>&lt;img alt="shell18" src="//blog-assets.keybrl.com/images/router/shell18.jpg" />&lt;/p>
&lt;p>插上主板底部的风扇控制线&lt;/p>
&lt;p>&lt;img alt="shell19" src="//blog-assets.keybrl.com/images/router/shell19.jpg" />&lt;/p>
&lt;p>理清线，把主板塞进合适的位置，拧上固定螺丝&lt;/p>
&lt;p>&lt;img alt="shell20" src="//blog-assets.keybrl.com/images/router/shell20.jpg" />&lt;/p>
&lt;p>嵌入前板，将各种线插到主板上，理好线&lt;/p>
&lt;p>&lt;img alt="shell21" src="//blog-assets.keybrl.com/images/router/shell21.jpg" />&lt;/p>
&lt;p>嵌入上板，翻转，可以看到底部&lt;/p>
&lt;p>&lt;img alt="shell22" src="//blog-assets.keybrl.com/images/router/shell22.jpg" />&lt;/p>
&lt;p>&lt;img alt="shell23" src="//blog-assets.keybrl.com/images/router/shell23.jpg" />&lt;/p>
&lt;p>置入硬盘架，插上 SATA 和硬盘电源线，拧好硬盘架两侧的8颗固定螺丝&lt;/p>
&lt;p>&lt;img alt="shell24" src="//blog-assets.keybrl.com/images/router/shell24.jpg" />&lt;/p>
&lt;p>&lt;img alt="shell25" src="//blog-assets.keybrl.com/images/router/shell25.jpg" />&lt;/p>
&lt;p>嵌入底板，翻转，装上天线，完工（这些做好的板看起来和原来的板色泽不太一样是因为我刷了木油，防潮、防蛀、防腐用的）&lt;/p>
&lt;p>&lt;img alt="shell26" src="//blog-assets.keybrl.com/images/router/shell26.jpg" />&lt;/p>
&lt;p>&lt;img alt="shell27" src="//blog-assets.keybrl.com/images/router/shell27.jpg" />&lt;/p>
&lt;hr />
&lt;p>本来这事就结束了，但是吧，我觉得这个还是太大了，不够便携。而且我寒假还要拿回家，这么大不好带。于是我又做了一个更小的，不包含硬盘架的机箱。&lt;/p>
&lt;p>拆卸后可以和主板和所有配件一起塞进这个小盒子里（不包括电源）&lt;/p>
&lt;p>&lt;img alt="shell30" src="//blog-assets.keybrl.com/images/router/shell30.jpg" />&lt;/p>
&lt;p>这个的制作方式和组合基本原理和上面那个差不多，就不详细说明了，放几张图吧&lt;/p>
&lt;p>&lt;img alt="shell31" src="//blog-assets.keybrl.com/images/router/shell31.jpg" />&lt;/p>
&lt;p>&lt;img alt="shell32" src="//blog-assets.keybrl.com/images/router/shell32.jpg" />&lt;/p>
&lt;p>&lt;img alt="shell33" src="//blog-assets.keybrl.com/images/router/shell33.jpg" />&lt;/p>
&lt;p>&lt;img alt="shell34" src="//blog-assets.keybrl.com/images/router/shell34.jpg" />&lt;/p>
&lt;p>&lt;img alt="shell35" src="//blog-assets.keybrl.com/images/router/shell35.jpg" />&lt;/p>
&lt;p>明显可爱多了不是吗，而且也更像一个路由器了！&lt;/p>
&lt;p>如果需要接硬盘的话，侧边有一个隐蔽的开口可以把 SATA 和硬盘电源线透出来&lt;/p>
&lt;p>&lt;img alt="shell36" src="//blog-assets.keybrl.com/images/router/shell36.jpg" />&lt;/p>
&lt;p>完美&lt;/p>
&lt;hr />
&lt;p>这篇文章主要就是讲一下设计思路，大致的加工工艺，给需要的同学一点参考。具体的设计细节就不说了，如果想自己做一个类似的机箱的话，我主要有下面一些提醒&lt;/p>
&lt;p>首先是做之前要有一个总体的安装过程的思路，不能只是按照想象安装好什么样子来设计，因为有可能会产生各部件之间冲突、活动受限，导致根本安装不起来&lt;/p>
&lt;p>设计可以按自己喜欢的来，但是，加工其实很困难的，一定要结合材料的理化性质和自己的加工能力来设计。像镂空、云纹、雕花什么的，我只能说祝您好运了。&lt;/p>
&lt;p>还有就是，加工真的很难，切这个需要手臂、手腕以一个不算小的力气，持续、稳定地做功。想象一下举着哑铃，往前伸直手，持续一天，手臂会非常酸的。非常劝退&lt;/p>
&lt;p>好了，没了。&lt;/p></content>
    </entry>

    <entry>
        <title>软路由与NAS(2) - 软件平台搭建</title>
        <link rel="alternate" type="text/html" title="软路由与NAS(2) - 软件平台搭建" href="http://blog.keybrl.com/boring/2019-02-18-router2_software.html"/>
        <id>http://blog.keybrl.com/boring/2019-02-18-router2_software.html</id>
        <updated>2019-02-18T00:00:00+08:00</updated>
        <published>2019-02-18T00:00:00+08:00</published>
        <summary></summary>
        <content type="html" xml:base="http://blog.keybrl.com/boring/2019-02-18-router2_software.html">&lt;h1 id="nas2-">软路由与NAS(2) - 软件平台搭建&lt;/h1>
&lt;blockquote>
&lt;p>这篇文章拖了不知道多久多久（大概3个月），终于把坑填了，顺便再挖一个坑，有空写篇文章讲讲这机子外壳的制作过程。&lt;/p>
&lt;/blockquote>
&lt;p>2018年秋冬之交（双十一前后），用工控主板搭了一个软路由和 NAS 的一个硬件平台，详见这篇文章 &lt;a href="./2018-11-02-router1_hardware.md">软路由与NAS(1) - 硬件平台搭建&lt;/a>。但其实，那只是有了一个机子，真正要实现软路由和 NAS 的功能，还需要一些软件的支持。&lt;/p>
&lt;p>所以这篇文章来讲讲这小东西软件平台的搭建历程...&lt;/p>
&lt;h2 id="_1">操作系统&lt;/h2>
&lt;p>首先是使用怎么样的操作系统作为这台机子的主要平台呢？这个问题其实没有多少答案，而且我之前也已经想好了。首先，不像尹大人那样那么会玩，我甚至没法想象去使用什么 Windows Server 来搞事情，也没听过什么 RouterOS 。所以其实，软路由部分肯定需要由 OpenWrt 来承载。 NAS 的话我的要求比较简单，就是能够通过网络访问、读写我那块 1T 硬盘里的数据就可以，性能最好能跟直接插上硬盘传差不多（这是不可能的），所以最简单的，就用 SMB 就行。 OpenWrt 也可以跑 SMB 。&lt;/p>
&lt;p>再想想还能有什么应用？其实不管是什么，我能想到的，基本上 OpenWrt 都可以，那么就开始安装 OpenWrt 吧。当然不要！虽然我也不知道为什么，也许只是因为我比较菜，我觉得如果有个图形界面会好很多。而且一个中规中矩的 Linux 系统可能会比较易于使用，而且而且 opkg 实在不如 apt 好用，所以我还是很希望能安装一个 Ubuntu 什么的。但 OpenWrt 肯定是需要的，所以最终方案就是&lt;/p>
&lt;p>&lt;strong>Ubuntu Desktop 18.04 + VM (OpenWrt)&lt;/strong>&lt;/p>
&lt;p>了&lt;/p>
&lt;p>Ubuntu 就直接官网下载安装就好了，没什么技术含量，不值一提。由于官方编译好的 x86_64 的 OpenWrt 固件完全不能符合我的需求，比如他甚至没有我那块无线网卡（QCA9880）的驱动，所以自己编译一个肯定是逃不了了。为了按照时间顺序记叙，我把这一部分留到后面再讲 （见 &lt;em>OpenWrt 编译&lt;/em> ）&lt;/p>
&lt;h2 id="_2">虚拟机&lt;/h2>
&lt;p>选购（选择）虚拟机也是一个复杂的事情。首先看看大家一般都会有些什么选择吧&lt;/p>
&lt;ul>
&lt;li>Oracle VM VirtualBox&lt;/li>
&lt;li>VMware Workstation Pro&lt;/li>
&lt;li>VMware Workstation Player&lt;/li>
&lt;li>Microsoft Hyper-V (on Windows10)&lt;/li>
&lt;/ul>
&lt;p>一般来说，虚拟机我都会首先考虑 Oracle VM VirtualBox ，这东西简单易用，开源，免费... 如果这东西能用，我甚至都不会再考虑别的方案&lt;/p>
&lt;p>但是大家还记得 VT-d 吧，这东西我在硬件平台搭建那篇文章提到过&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>英特尔&amp;reg; 定向 I/O 虚拟化技术 (VT-d) 在现有对 IA-32（VT-x）和安腾&amp;reg; 处理器 (VT-i) 虚拟化支持的基础上，还新增了对 I/O 设备虚拟化的支持。英特尔定向 I/O 虚拟化技术能帮助最终用户提高系统的安全性和可靠性，并改善 I/O 设备在虚拟化环境中的性能。&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>通过 VT-d 我才能将无线网卡穿透进虚拟机，在虚拟机里管理、配置并使能无线网卡。这样做的好处，一个是通过 OpenWrt 可以很方便地设置 WiFi 信道、带宽、功率、密码之类的东西，第二个是这样做 I/O 性能会好很多。&lt;/p>
&lt;p>没有 VT-d 的解决方案就是在宿主机配置无线网卡，然后通过虚拟网桥将虚拟机里的虚拟网卡和这块无线网卡桥接。缺点就是没有上面说的两个好处。&lt;/p>
&lt;p>那么，既然我花了那么多功夫挑了一块带有支持 VT-d 的 CPU 的主板，这就一定得用上！！&lt;/p>
&lt;p>很可惜，我摸索了半天、查了半天，也不知道怎么在 VirtualBox 使用 CPU 的 VT-d 功能，最后我也请教了尹大人一下，貌似的确是不支持的。&lt;/p>
&lt;p>VMware Workstation Pro 可能可以，毕竟还是个挺专业的虚拟机软件，但是那是商业软件，跟我的信仰不很相符，而且要付费，而且对于我来说还非常昂贵。随随便便就使用盗版也完全不符合我的信仰，所以暂时不予考虑。VMware Workstation Player 虽然是免费的（非商业使用时），但是功能太少，感觉比 VirtualBox 也不会好到哪里去。&lt;/p>
&lt;p>Microsoft Hyper-V 这个东西要在 Windows 系统上才能使用，而且 Windows 10 的话要 Pro 才有这个功能。刚好我有一台 Windows 10 Pro 的机器，稍微尝试过，从微软宣传来看还是很牛的。但是我那台小东西没有 Win 10 Pro 啊，我也完全不想装 Windows ， Windows 啥也干不了。而且，按尹大人的说法，要 Windows Server 的 Hyper-V 才支持 VT-d 。还是需要折腾一堆盗版软件，罢了，不折腾了。&lt;/p>
&lt;p>那我就走投无路了吗？当然没有。经过尹大人的提点，我想起了大名鼎鼎的 KVM (Kernel-based Virtual Machine) ，开源、免费、强大，而且简单的使用算不上复杂。赶紧 Google 一下，安装...&lt;/p>
&lt;p>至于如何使用 VT-d 。稍微 Google 了一下，主要就以下几步&lt;/p>
&lt;ol>
&lt;li>修改 grub 内核引导参数，设置 &lt;code>intel_iommu=on&lt;/code> （对于 Intel&amp;reg; 的 CPU），重启。这一步主要是用于使能某些内核模块，使其支持 IOMMU 功能&lt;/li>
&lt;li>在虚拟机中添加 PCI-E 设备，选择需要直通的设备。这个在图形化界面上操作会容易很多，比如 &lt;code>virt-manager&lt;/code> 。开机（开虚拟机）&lt;/li>
&lt;li>第一次开机可能会报错，大意是不能分配所选的硬件。这个的话可以先 &lt;code>virtsh nodedev-detach xxxx&lt;/code> （&lt;code>xxxx&lt;/code> 是要直通的设备的设备号）解除宿主机的占用，要查看设备号的话可以先 &lt;code>virtsh nodedev-list --tree&lt;/code> 。&lt;/li>
&lt;/ol>
&lt;p>这个具体可以 Google 。&lt;/p>
&lt;p>我按着教程设置好了之后还是开不了机，又 Google 了一圈，原因应该是无线网卡和两块有线网卡被分配到同一个 IOMMU 组了。这种情况下只能拆分这个 IOMMU 组，或者解除这个 IOMMU 组中所有设备在宿主机中的占用（既然宿主机用不了了，那我还不如把他们全部分配给虚拟机）。鉴于拆分一个 IOMMU 组的操作对于我来说过于繁琐，所以干脆把那些设备都分配给虚拟机吧。反正虚拟机是软路由，让他管理所有网络设备也挺好。修改完设置就可以开机了。&lt;/p>
&lt;h2 id="openwrt">编译 OpenWrt&lt;/h2>
&lt;p>OpenWrt 肯定是得自己编译一个，因为官方编译好的版本甚至都没有我那块无线网卡的驱动。编译嘛，也算得上简单，只要照着官方文档做就行（最好能有梯子，不然编译时的一些下载过程能够慢得让你怀疑人生）。配置的话，主要就是加上 &lt;code>Firmware -&amp;gt; ath10k-firmware-qca988x&lt;/code> ，这是对我那块无线网卡 QCA9880 的支持。其他的模块可以根据自己喜好选择，一些好玩的小应用也可以随便挑些（比如 啥都扫个死 之类的）。然后 &lt;code>make download&lt;/code> ， &lt;code>make&lt;/code> 就行。&lt;/p>
&lt;p>第一次我是在那台小东西上编译的，因为编译完就可以立刻安装，看起来很方便。顺便也是测试一下 CPU 性能，还有就是发热量什么的（当时买的散热片还没有到，还记得硬件平台搭建那篇文章里扳手湿纸巾的照片吗）。编译过程超过一个小时，非常慢了，受不了，所以后面都是在 302 的喷气式发动机（一台8核、16G内存的刀片服务器，因其开机自检时风扇发出的强大声浪而得名“喷气式发动机”）上编译的。不过这个编译过程还是让我对这个小东西的发热量有了一定的认识，CPU 100% 时无风扇是能十分勉强地压住的，基本稳定在70摄氏度上下，平时 CPU 跑不满 100% ，就完全没有问题了。&lt;/p>
&lt;p>编译完，设置虚拟机，启动。&lt;/p>
&lt;h2 id="_3">网络配置&lt;/h2>
&lt;p>网络配置的难点，其实主要不在那几个真的网卡的配置上。因为都直通给虚拟机了，所以在 OpenWrt 里设置非常简单。难点主要在于配置虚拟机的 OpenWrt 与外面宿主机的 Ubuntu 之间的网络。&lt;/p>
&lt;p>如果是对虚拟机的有一些了解的人，他们第一反应肯定是 “桥接” 嘛。我们再来回顾一下虚拟机网络的几大经典模式 NAT、Bridged、Host-only、Internal&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Mode&lt;/th>
&lt;th align="center">VM -&amp;gt; Host&lt;/th>
&lt;th align="center">VM &amp;lt;- Host&lt;/th>
&lt;th align="center">VM1 &amp;lt;&amp;gt; VM2&lt;/th>
&lt;th align="center">VM -&amp;gt; Net/LAN&lt;/th>
&lt;th align="center">VM &amp;lt;- Net/LAN&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Host-only&lt;/td>
&lt;td align="center">+&lt;/td>
&lt;td align="center">+&lt;/td>
&lt;td align="center">+&lt;/td>
&lt;td align="center">-&lt;/td>
&lt;td align="center">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Internal&lt;/td>
&lt;td align="center">-&lt;/td>
&lt;td align="center">-&lt;/td>
&lt;td align="center">+&lt;/td>
&lt;td align="center">-&lt;/td>
&lt;td align="center">-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bridged&lt;/td>
&lt;td align="center">+&lt;/td>
&lt;td align="center">+&lt;/td>
&lt;td align="center">+&lt;/td>
&lt;td align="center">+&lt;/td>
&lt;td align="center">+&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NAT&lt;/td>
&lt;td align="center">+&lt;/td>
&lt;td align="center">Port forward&lt;/td>
&lt;td align="center">-&lt;/td>
&lt;td align="center">+&lt;/td>
&lt;td align="center">Port forward&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NAT Service&lt;/td>
&lt;td align="center">+&lt;/td>
&lt;td align="center">Port forward&lt;/td>
&lt;td align="center">+&lt;/td>
&lt;td align="center">+&lt;/td>
&lt;td align="center">Port forward&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>参考 Oracle VM VirtualBox 的文档，的确桥接就能达到要求。但是 VirtualBox 桥接网络的配置应该是建立一个虚拟机虚拟网卡到宿主机真实网卡的一个虚拟网桥。用 KVM 也可以这样配置，但是我已经把仅有的两个以太网卡、一个无线网卡直通给虚拟机了，没有多余的网卡可以用于设置桥接。&lt;/p>
&lt;p>不过幸运的是， KVM 可以自己设置虚拟网络，并不需要局限于某几种固定的网络结构。我随便摸索了一下，网通了。大概就是，新建一个虚拟网桥virbr1，虚拟机添加虚拟网络连接到虚拟网桥。然后 Openwrt 里将虚拟网卡桥接到其他几个 LAN 端的网卡上，宿主机设置 virbr1 接口的 ip 地址为 LAN 端网络的一个 ip 地址，设置宿主机路由表，设置 Openwrt 路由表。然后宿主机和 LAN 端其他设备都互通了。其实我完全搞不明白发生了什么，我现在连这一通虚拟设备、虚拟网络这些设置的东西在逻辑上是什么结构都不清楚，不过网络通了。设置虚拟机的虚拟网卡为 virtnet 之后，实测虚拟机和宿主机之间传输速率能达到 10Gbps ，看起来就不会有什么瓶颈了。&lt;/p>
&lt;p>有空我得好好理解一下这里面的配置&lt;/p>
&lt;h2 id="_4">剩余的工作&lt;/h2>
&lt;p>网络都设置好之后其实问题就很简单了。安装配置 smb ，设置自动挂载硬盘。但是，非常奇怪的是，通过无线局域网访问 smb 时，传输速率只有不到 30MBps ，也就是 240Mbps ，远没有达到千兆位每秒。用 iperf3 测试了一下，通过 WiFi 连接软路由时，设备与软路由之间只有 300Mbps 左右的传输速率（设备紧贴路由器），那么就怪不得了，估计是无线的配置上、无线网卡的驱动、或者别的什么玄学的地方还有点问题了，有空再研究一下。&lt;/p>
&lt;p>但是当我通过以太网连接， smb 的下载速率仍然不过 80MBps ，也就是 640Mbps ，也还是远没有达到千兆位以太网的传输速率。 iperf3 测速没问题， 1000Mbps 上下，那这少了几百兆位每秒的速率是怎么回事呢。硬盘读写速率没问题，本机拷贝的话 200MBps 左右，本机使用 smb 下载也差不多有 200MBps。那就很玄学了，有空再看看瓶颈在哪，看看怎么可以优化一下。&lt;/p>
&lt;hr />
&lt;h2 id="openwrt_1">关于OpenWrt&lt;/h2>
&lt;p>最开始真正接触软路由，是大二的时候，在科协。尹大人在一台老旧的主机上跑个 OpenWrt ，那个机子有四个网卡（两LAN两WAN）。两个WAN一个走翼讯出，一个走校园网出，两个LAN接两个无线AP。效果就是睿思等校内流量走校园网，其他流量走翼讯，两个WiFi中一个是普通的，一个带透明代理。初见很是惊奇，未曾想过竟能如此优雅地配置网络。&lt;/p>
&lt;p>那时的我，刚好大一结束的暑假刚看完一本计算机网络的入门教材（也是尹大人推荐的，《计算机网络 自顶向下方法》），对计算机网络充满兴趣。而 OpenWrt 在那时的我看来是一个完美的学习平台，可以检验我对很多计算机网络基础知识的认识，而且事实上也让我认识到自己对书上看的理解得太肤浅。所以从那时起我就慢慢玩起了 OpenWrt ，开始是直接官网下载固件来玩，后来也尝试照着文档自己编译来玩（特别是当发现官方提供的 Raspberry Pi 3B+ 的固件不能正常使用）。&lt;/p>
&lt;p>不过其实到今天我也还只是稍微改几个配置然后编译，然后能用就不管的水平。比起尹大人，平均一天一编译，对每个配置项都了如指掌，甚至亲自修改源码，我算是非常肤浅的用户了。&lt;/p></content>
    </entry>

    <entry>
        <title>2018年终总结</title>
        <link rel="alternate" type="text/html" title="2018年终总结" href="http://blog.keybrl.com/boring/2018-12-31-summary.html"/>
        <id>http://blog.keybrl.com/boring/2018-12-31-summary.html</id>
        <updated>2018-12-31T00:00:00+08:00</updated>
        <published>2018-12-31T00:00:00+08:00</published>
        <summary></summary>
        <content type="html" xml:base="http://blog.keybrl.com/boring/2018-12-31-summary.html">&lt;h1 id="2018">2018年终总结&lt;/h1>
&lt;p>想来已经20年没有好好写过年终总结了，正值 2018 这么一个吉利的数字，加上正值人生中一个相当关键的节点，还是总结一下。一方面让自己觉得 2018 自己还是做过事情的，另一方面给 2019 定几个小目标...&lt;/p>
&lt;h2 id="_1">时间线索&lt;/h2>
&lt;p>&lt;strong>2018.01&lt;/strong>&lt;/p>
&lt;p>想来 2018 年最初做的有趣的事情就是给我的 Poker 加了灯，那时正值期末考试周无聊（就像现在的一周之后）。具体可以浏览这篇文章 &lt;a href="2018-01-20-lighted-poker2.md">“IKBC Poker2 加灯历程”&lt;/a> 。（原来我的 Poker 都陪我超过一年了）&lt;/p>
&lt;p>这月即将结束时，考虑到过完年能有不少闲钱，遂入了人生中第一个 Raspberry Pi 3B 。不过事实上真的没什么好玩，热情也就持续了不到两个月。期间用它做过最有用的事情莫过于 带透明代理的便携路由（OpenWrt）、让一台不能联网的打印机变成网络打印机（SMB打印服务）、让一个3.5寸硬盘变成无线硬盘（还是SMB）、成绩监视系统服务器（详见 &lt;a href="https://github.com/keybrl/xidian_grade_monitor">keybrl/xidian_grade_monitor&lt;/a> ，新教务系统上线后就失效了）。在他没到一周年纪念日的时候我就把他转手给了舍友，新入了一个 3B+ ，后来瞎搞 GPIO ，烧了，送修，还没给我送回来。&lt;/p>
&lt;p>&lt;strong>2018.02&lt;/strong>&lt;/p>
&lt;p>CET-4 好像是这个时候出的，430分飘过，心中巨石落地。&lt;/p>
&lt;p>二月末就开学了，新入了一个虹吸壶，于是乎我便熟练掌握了 法压、越式滴滤、滴滤、虹吸 制作咖啡的方法（熟练个鬼了）。关于这个这个东西的第一次使用，可以看这篇文章 &lt;a href="2018-03-03-siphon.md">“虹吸壶冲泡咖啡”&lt;/a>（第一次还是相当笨拙和小心翼翼）。事实上，这完全不能算是一个错误的尝试，目前我喝的最多的是滴滤的，其次就是虹吸的了。感觉虹吸还是相当适合入门，虽然体积大了点，流程又有点复杂，还有热源，看起来相当可怕。但是咖啡做出来质量还相当可以，而且也不算很复杂，熟练了5分钟之内就可以做好，有一点初中化学实验常识的人应该都不会炸了壶或者火灾什么的。最重要是便宜啊，一个虹吸壶 100 - 300 已经非常不错了，滴滤的话得 漏斗 + 手冲壶 ，漏斗又有各种形状的，手冲壶又可高可低，滤纸又是一大耗材（虹吸壶用滤布，我一般几个月才换一次）。而且虹吸壶非常容易可以做多人份，多加水，多加粉就好，滴滤的话粉一多，水一多，自己平时习惯的注水节奏就完全不合适，可能各种灾难，而且滤纸还要用不同的（滤纸大小只是一方面，主要是透水速率不同）。&lt;/p>
&lt;p>咳咳，跑题了是不是...&lt;/p>
&lt;p>&lt;strong>2018.03&lt;/strong>&lt;/p>
&lt;p>我也忘了是不是这个月了，去年下半年软考成绩出了，挂了，上午下午都差几分。罢了罢了，其实现在来看还是相当难的，因为报的是“网络工程师”，我开始以为主要是计网的知识，所以还挺有信心，也没有专门去复习，后来发现其实包括了 大一的机导、大二大三的计组、大二下的软件工程和数据库系统概念、大三上的计算机网络、编译原理、操作系统 相关的知识，所以就全完了，特别是软件工程那些名词那么多，没学过的谁知道是啥。如果是大三上或者大二下去报都稳很多。罢了，也懒得考了。&lt;/p>
&lt;p>&lt;strong>2018.04&lt;/strong>&lt;/p>
&lt;p>跟着钟大佬接触了一个外包，具体是个啥就不方便透露了，反正我就是个没地位的 web前端。最后甲方嫌我们菜，另外找了外包公司，算是不了了之。没所谓，啥也没交付就拿了几百预付（虽然没交付但我还是写了个大概的样子了啊，心疼（实际上好像比起拿到的钱，这点劳动还算值得））&lt;/p>
&lt;p>跟上面那个几乎同一时期的，SS::STA 的传统项目，所谓“清明集训”，在这一年与 为之工作室 合作举办。为之有钱有运营小姐姐有产品有策划果然是不一样（其实也没有多不一样），反正看起来活动搞的很大了（事实上初赛总参赛队伍还没有晋级名额多）。虽然作品不多，但是看得出来学弟学妹们都挺努力了。我也就顺便做了个活动主页和最后的评分系统，算是上面那个外包结束了，消遣一下。如果不嫌无聊也可以看看 &lt;a href="https://github.com/keybrl/rw_hackathon">keybrl/rw_hackathon&lt;/a> ，甚至都没有整理，就随便堆在仓库里&lt;/p>
&lt;p>&lt;strong>2018.06&lt;/strong>&lt;/p>
&lt;p>背了一年 SS::STA Web 组的锅之后，也是时候交接了，最后把锅给了党老师。在 SS::STA 一年的工作也算是尘埃落定、盖棺定论（盖棺什么鬼）了。从现在来看，这个交接也不是一个坏决定。&lt;/p>
&lt;p>唉，大学参与过的唯一一点社团工作。没有达到自己想象的结果，也还是相当遗憾，可能我也是太菜了点。&lt;/p>
&lt;p>&lt;strong>2018.07&lt;/strong>&lt;/p>
&lt;p>这学期期末的时候，又是那种复习周，百无聊赖那种。接了一个外包，算得上是一个大挑战。甲方有一个 Python 写的 QGIS 2.x 的插件，期望迁移到 QGIS 3.x ，原项目大概就两万多行。主要就是 Python 2.7 要迁移到 Python 3.6 ，然后图形库要从 PyQt4 转到 PyQt5 ，以及 QGIS 一些 API 的迁移。忙了差不多之后，甲方又说要加需求（当然，钱也加了），要整合几个小的插件到这一个大的上。那几个小插件有几个 QGIS 3.x 的，源码弄来直接加就是了，那几个 QGIS 2.x 的，由于前面迁移那个大的插件把我搞吐了，实在不想再搞了，就说不搞了。后来在甲方坚持下，还是又迁移了几个小的 QGIS 2.x 的插件，还剩几个就不弄了。工期历时 30 天，得钱数千。&lt;/p>
&lt;p>虽然好像这种工作并不是我希望的，也不是我喜欢的领域，但是毕竟有钱花的感觉还是非常棒的。拿了钱转手买了一台 New Surface Pro （也就是现在所说的 5，最低配那个），Surface 用起来可真棒，这学期我甚至都没有带过书去上课，日常去上课就徒手带一台 Surface ，课本看电子版，笔记用 OneNote ，草稿有草图板，比纸笔书方便多了。日常也不怎么拿她写代码，IDE都很少运行，就看看文档，刷刷淘宝，看看电影，玩几个清新明丽的小游戏，Office写写实验报告、做个PPT，写写博客（比如现在这篇），草图板做个草稿啥的，贼舒适，堪称年度最值剁手。&lt;/p>
&lt;p>暑假除了做这个外包，还有就是顺利考过了科二、科三，练车可真累，以及，科四只能等寒假回家考了，没能在 2018 年拿到驾照还真是可惜呢。&lt;/p>
&lt;p>&lt;strong>2018.09&lt;/strong>&lt;/p>
&lt;p>大三了，可怕吧！！太可怕了，转眼竟然都大三了，而我还那么菜。&lt;/p>
&lt;p>这学期常常陷入痛苦的思考人生中，又咸鱼、又菜，怕是马上就要去要饭了。幸好，意志坚定，我还活着。&lt;/p>
&lt;p>开学又到了和小绿人（军训的学弟学妹）抢饭吃的时节，SS::STA 的招新活动也开始了。感觉厉害的学弟学妹还是年年有啊（哎呀，我好菜啊）&lt;/p>
&lt;p>这学期一大重要改变就是，把工作场所从宿舍搬到 G302 （SS::STA 活动室），但好像并没有怎么改善咸鱼的状态。&lt;/p>
&lt;p>&lt;strong>2018.10&lt;/strong>&lt;/p>
&lt;p>由于受不了在 Windows 平台没有像样的扫雷玩，于是乎将 Ubuntu 的 gnome-mines 移植到了 Web 端，详见 &lt;a href="https://github.com/keybrl/keybrl-mines">keybrl/keybrl-mines&lt;/a> （想玩的话点这个 &lt;a href="https://mines.keybrl.com/">KeybrL Mines&lt;/a> ）。算是我这个学期唯一一个，完全遵从我内心的项目了，大三上忙得真是...（骂人的话）&lt;/p>
&lt;p>&lt;strong>2018.11&lt;/strong>&lt;/p>
&lt;p>又到一年双十一，岂能不买买买。于是乎用个小小的工控主板搭了一个软路由 + NAS，详见 &lt;a href="2018-11-02-router1_hardware.md">“软路由与NAS 硬件平台搭建”&lt;/a>&lt;/p>
&lt;p>&lt;strong>2018.12&lt;/strong>&lt;/p>
&lt;p>终于到这个月了，这个月好像除了忙各种实验报告、大作业、验收，就什么都没做了。太可怕了，但愿忙完这周就能结束吧...（一定要结束啊，我还等着期末考试周百无聊赖干些有趣的事情呢）&lt;/p>
&lt;h2 id="_2">小小总结&lt;/h2>
&lt;p>看来大三上过得真咸鱼&lt;/p>
&lt;h2 id="2019">关于2019&lt;/h2>
&lt;p>2019 年立几个 flag 吧&lt;/p>
&lt;ol>
&lt;li>上半年找到一份像样的实习（能顺利结束就好）&lt;/li>
&lt;li>下半年找到一份正式的工作，工资最好能够我刷淘宝，还能有多就更棒了&lt;/li>
&lt;li>早睡早起，正常饮食（不可能的）&lt;/li>
&lt;li>有时间玩游戏&lt;/li>
&lt;li>有时间看书&lt;/li>
&lt;li>坚持更新我的博客&lt;/li>
&lt;li>多写点有益身心的代码&lt;/li>
&lt;li>继续没有挂科&lt;/li>
&lt;li>毕业前学校不出幺蛾子&lt;/li>
&lt;li>不要再遇到wxq教的课&lt;/li>
&lt;li>继续保持有头发&lt;/li>
&lt;li>有钱入一台 Surface Book？&lt;/li>
&lt;li>有钱入一台浓缩咖啡机？&lt;/li>
&lt;li>有钱能喝得起更棒的咖啡？&lt;/li>
&lt;li>最好能遇见一个真正喜欢的女孩子？（那她可真惨）&lt;/li>
&lt;li>拿什么来凑够10个呢，在网易云能够听到 3858 首新歌吧（这样我就能升到 Lv.9 了）&lt;/li>
&lt;/ol></content>
    </entry>

    <entry>
        <title>软路由与NAS(1) - 硬件平台搭建</title>
        <link rel="alternate" type="text/html" title="软路由与NAS(1) - 硬件平台搭建" href="http://blog.keybrl.com/boring/2018-11-02-router1_hardware.html"/>
        <id>http://blog.keybrl.com/boring/2018-11-02-router1_hardware.html</id>
        <updated>2019-02-18T00:00:00+08:00</updated>
        <published>2018-11-18T00:00:00+08:00</published>
        <summary></summary>
        <content type="html" xml:base="http://blog.keybrl.com/boring/2018-11-02-router1_hardware.html">&lt;h1 id="nas1-">软路由与NAS(1) - 硬件平台搭建&lt;/h1>
&lt;p>从大二下学期以来，一直梦想着拥有一个自己的软路由。千兆位局域网、透明代理、NAS、自建git私有仓库、...只要能运行Linux系统，就有无尽的乐趣。这种想法总会让我对各种奇奇怪怪的机子产生兴趣（也不知道我大三去了嵌入式方向是不是因为这个）&lt;/p>
&lt;p>最初我有一个 Raspberry Pi 3B ，那也确实好玩，我还拿他刷过 OpenWrt ，做过一段时间的随身路由，上面配置有透明代理。可是 Raspberry Pi 最大的问题就是 I/O 性能太弱， USB 、内置无线网卡，都慢得不行。它本身的 SD 卡读写性能也是一个瓶颈。这就导致无论用它干什么都觉得不爽，无论是软路由还是文件共享，还是别的什么服务。也就有时需要一个东西在校园网内跑个长进程时需要他（比如大二期末用它跑了个成绩监视应用，有新成绩出来时通知我（项目仓库在这 &lt;a href="https://github.com/keybrl/xidian_grade_monitor">keybrl/xidian_grade_monitor&lt;/a> ）），它的体验甚至不如阿里云学生主机。所以后来也就很少玩了。开学初把它卖给了舍友，换了个 Raspberry Pi 3B+ ，一样没什么好玩。几周前，不小心短接了他 GPIO 的 VCC 5V 和 3.3V ，瞬间黑屏了。送修至今（发表这篇文章时已经等了 38 天了），了无音信，便不再牵挂。&lt;/p>
&lt;p>大二下学期开学初，看了尹大人的几篇博客，了解了他与他的那个小小的软路由之间的有趣故事。比如这篇 &lt;a href="https://www.yichya.dev/diy-nas-project-1/">DIY NAS Project (1) Hardware and OpenWRT&lt;/a> ，这是他这个系列文章的第一篇。下面这是尹大人初代 NAS&lt;/p>
&lt;p>&lt;img alt="尹大人的初代" src="//blog-assets.keybrl.com/images/router/yichya_router.webp" />&lt;/p>
&lt;p>感觉，哇，太厉害了，我也想要一个！！于是乎心心念念到了现在，在又一个双十一的推波助澜下（虽然我买的这些东西都不会降价），我开始了我有生以来最具挑战的一次 DIY 之旅。&lt;/p>
&lt;hr />
&lt;h2 id="too-young">Too Young!&lt;/h2>
&lt;p>电脑嘛，首先是 CPU 和 板子，因为 Raspberry Pi 给我的不好印象，我觉得只有 x86 好玩，兼容性也好，跑个什么系统都比较随意，其他平台都没意思（ARM 各种玄学）。开始也没多想，某宝搜个“工控主板”一大堆，挑了个比较小巧，好看的，像这个...&lt;/p>
&lt;p>&lt;img alt="n29" src="//blog-assets.keybrl.com/images/router/n29.png" />&lt;/p>
&lt;p>CPU 是 Intel&amp;reg; Celeron&amp;reg; J1800 ， TDP 只有 10W ，大小也只有 12cm * 12cm ，而且 CPU 我查了一下性能还可以。双以太网卡、一个 SATA 、一个 mSATA 、一个 mini PCI-E 、 USB 若干（甚至还有 USB3.0 ）。看起来无可挑剔了。&lt;/p>
&lt;p>正当我准备买时（大概在我后来真正下单前 12h），我在群里问了一下尹大人。我获知了一个惊人的消息（其实一点也不惊人，因为我就没有想过），&lt;strong>这个赛扬 J1800 是不支持 VT-d 的！&lt;/strong>&lt;br />
尹大人刚说时，其实我没有什么感觉，因为我也不知道什么是 VT-d ，反正尹大人也经常说一些奇奇怪怪的名词，估计是什么高级功能，没有就没有吧，反正就是个软路由。但是出于对尹大人的尊敬，我查了一下什么是 VT-d ...&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Intel&amp;reg; 官方说法：&lt;/strong>&lt;br />
&lt;em>Intel&amp;reg; Virtualization Technology for Directed I/O (VT-d) continues from the existing support for IA-32 (VT-x) and Itanium&amp;reg; processor (VT-i) virtualization adding new support for I/O-device virtualization. Intel VT-d can help end users improve security and reliability of the systems and also improve performance of I/O devices in virtualized environments.&lt;/em>&lt;/p>
&lt;p>&lt;strong>中文：&lt;/strong>&lt;br />
&lt;em>英特尔&amp;reg; 定向 I/O 虚拟化技术 (VT-d) 在现有对 IA-32（VT-x）和安腾&amp;reg; 处理器 (VT-i) 虚拟化支持的基础上，还新增了对 I/O 设备虚拟化的支持。英特尔定向 I/O 虚拟化技术能帮助最终用户提高系统的安全性和可靠性，并改善 I/O 设备在虚拟化环境中的性能。&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>嗯，看起来就是某种对 I/O 设备做专门优化的虚拟化技术。再 Google 一查，不得了，有 VT-d 的话，可以直接把一个 PCI-E 设备划分给虚拟机，可以大幅提高虚拟机的某些 I/O 性能。而且，按尹大人的说法， &lt;em>“据我说知，这是目前让无线网卡穿进虚拟机的 &lt;strong>唯一方法&lt;/strong> ”&lt;/em> 。&lt;/p>
&lt;p>一语惊醒梦中人。如果按照我最初的设想，就是这机子上跑个 Ubuntu ， Ubuntu 里跑个 OpenWrt 虚拟机， Openwrt 承担软路由的功能， Ubuntu 上面还可以部署别的应用。可这如果无线网卡穿不进虚拟机，我还做个鬼无线路由啊（其实也是可以的，只是少了很多配置无线参数的空间，还要面临性能的大幅下降的窘迫）。所以如果要愉快玩耍，肯定要买个带支持 VT-d 的 CPU 的板子。&lt;/p>
&lt;h2 id="_1">甚至有点绝望&lt;/h2>
&lt;p>多了一个要求的话，找板子还是很艰辛的。我甚至顺便去翻了翻 Intel&amp;reg; 的产品线。工控板，供电和散热都有比较严格的限制，我还想没有风扇，这样 TDP 基本就限制在 10W 左右了。 Intel&amp;reg; 目前满足这个要求的 CPU 只有 Celeron&amp;reg; 和 Core&amp;trade; m3 。想想都知道， m3 那么贵，不会有厂商愚蠢到把它用在工控机上的，所以只剩 赛扬&amp;reg; 了。 赛扬&amp;reg; 的芯片命名也很有趣，大致分 4 类：&lt;/p>
&lt;ul>
&lt;li>Gxxxx G 开头跟 4 个数字的， TDP 基本都 2、30W ，受不起；&lt;/li>
&lt;li>Jxxxx J 开头跟 4 个数字的， TDP 一般比较低， 10W 或以下，但是全都没有 VT-d；&lt;/li>
&lt;li>Nxxxx N 开头跟 4 个数字的，跟 Jxxxx 差不多，反正没有 VT-d；&lt;/li>
&lt;li>xxxxU 4 个数字开头跟一个字母 U 的， TDP 普遍是 15W ，稍高，但是支持 VT-d；&lt;/li>
&lt;/ul>
&lt;p>综合来看，别无选择，只能是 Celeron&amp;reg; xxxxU 了。&lt;/p>
&lt;p>把现有的几个 xxxxU CPU 的型号依次在某宝搜搜，最后，选择真是少得可怜。一个是尹大人的二代软路由用的板子，长这样&lt;/p>
&lt;p>&lt;img alt="3215U" src="//blog-assets.keybrl.com/images/router/3215U.png" />&lt;/p>
&lt;p>那是一块 Celeron&amp;reg; 3215U ，四个以太网卡还是很诱人的，具体可以看尹大人这篇文章 &lt;a href="https://www.yichya.dev/diy-nas-project-3/">DIY NAS Project (3) Hardware Upgrade &amp;amp; Disaster&lt;/a> 。这块板子据说有 USB3.0 干扰网卡的情况，加上也比较贵，而且仔细一想， 4 以太网卡对我也没什么用，所以还是算了。&lt;/p>
&lt;p>然后还有就是 Celeron&amp;reg; 3855U 的有几块，大致是这样的&lt;/p>
&lt;p>&lt;img alt="3855U" src="//blog-assets.keybrl.com/images/router/3855U.png" />&lt;/p>
&lt;p>区别的话主要是，有的板子支持 DDR4 2133 内存条，有的板子支持 DDR3L 1333/1600 。考虑到 DDR4 内存可能比这板子都贵，就选了用 DDR3L 内存的，也就是上图那块。配置基本如下&lt;/p>
&lt;ul>
&lt;li>CPU: Intel&amp;reg; Celeron&amp;reg; 3855U&lt;/li>
&lt;li>NB/DDR3L 插槽 * 1，支持 DDR3L 1333/1600&lt;/li>
&lt;li>mini PCI-E 插槽 * 1，可以插无线网卡&lt;/li>
&lt;li>mSATA 插槽 * 1&lt;/li>
&lt;li>USB3.0 、 USB2.0 各 * 2&lt;/li>
&lt;li>吉比特以太网卡 * 2&lt;/li>
&lt;li>SATA3.0 接口及 4pin 硬盘电源接口各 * 1&lt;/li>
&lt;li>VGA 、 HDMI 各 * 1&lt;/li>
&lt;li>GPIO 、 COM 、 FPI 、 PS/2 ...（除了GPIO都不认识...）&lt;/li>
&lt;/ul>
&lt;p>心一横，下单！！&lt;/p>
&lt;h2 id="_2">买买买！！&lt;/h2>
&lt;p>下单了板子之后，就开始了各种配件的选购，因为不想双十一跟大家排队拿快递，加上主要配件早就看好了，所以多数都在当天下单了。&lt;/p>
&lt;p>首先是内存、外存、无线网卡&lt;/p>
&lt;p>&lt;img alt="order1" src="//blog-assets.keybrl.com/images/router/order1.png" />&lt;/p>
&lt;p>内存没什么挑的，找了个比较便宜的大牌子，镁光的8G DDR3L 1600。原本我想的是一个小路由用不了多少内存，我主力笔记本也才8G内存，302一堆2G内存的旧机子都能算得上流畅运行，偶尔给他们插上4G内存就流畅得不行了，所以4G内存绝对足够。 &lt;strong>但是&lt;/strong> ，在我下单之前，我又在群里问了一下，尹大人竟然回我了个“多多益善”，还说什么8G内存就能支持什么什么文件系统了（具体是什么我甚至都忘了）。加上我一看8G比4G也就贵了100多，这多4G跑个虚拟机什么的肯定更轻松，于是心一横又下单了。&lt;/p>
&lt;p>外存嘛，本来我有一块1T的希捷酷鱼3.5"硬盘，也是我平时用来堆东西的盘，本来就够了。 &lt;strong>但是&lt;/strong> ，尹大人见我要搞个软路由，在群里提议我买个SSD，说什么“系统装在SSD里，硬盘没事可以下下来”，“装个SSD可以显著提高系统性能的”，“反正一个几十G的拆机盘也不用几个钱”...有道理喔，赶紧淘宝搜索一下，一圈搜索下来，贵的太贵，受不起。便宜的看不上，那些几十块钱几十G的SSD，顺序写入150MB/s，顺序读220MB/s，这不就坑人嘛，我那块硬盘都随便上200MB/s，虽说这SSD访问速率和4K随机读取什么的比硬盘要好很多，但这挫成这样的SSD还真不想买。于是乎，心一横，挑了个不算很贵，也不算差的中档SSD...&lt;/p>
&lt;p>无线网卡肯定得挑个好的。由于才疏学浅，开始只知道 Intel&amp;reg; 无线网卡还不错，淘宝一搜，一大堆，随便挑个看起来还不错的，所谓 2.4GHz /5GHz 双频的，所谓支持千兆位无线局域网的，便宜的，五六十左右的，一块。 &lt;strong>但是&lt;/strong> （又是但是），我还是在群里问了一下，尹大人直接说了个 &lt;strong>“QCA9880”&lt;/strong> ，这可还行，都精确到型号了，赶紧 Google 一下。高通的的一块其貌不扬的无线网卡，看介绍好像是挺厉害，再看尹大人说“无线网卡，除了高通的方案都不用考虑”...后面尹大人说了一大堆，结合 Google ，大致理解了一下。就是，目前的技术，基本上只能做到单天线 450Mbps ，业界对千兆位无线局域网的解决方案都是 MIMO (Multi-input Multi-output, 多输入多输出) 也就是，多根天线在不同频段，同时传输，多根天线互不干扰。一般手机只有一根天线，那么就只能到 450Mbps ，笔记本一般有两根天线，就可以 2 * 2 MIMO ，达到 900Mbps 。苹果的笔记本比较厉害，他们是支持 3 * 3 MIMO 的，到 1300Mbps 。多天线除了可以 MIMO 提升单用户的传输速率，还可以通过 MU-MIMO （多用户多输入多输出）降低用户之间的冲突，提升整个无线局域网内的网络质量。所以这也是为什么现在很多路由器都有两根或者三根天线的原因。而回到网卡上， QCA9880 是有3个天线接口的，支持 3 * 3 MIMO，而 Intel&amp;reg; 多数网卡都是 蓝牙 + 2天线 ，蓝牙对于软路由来说又没卵用，所以就性价比不怎么样。加上， MIMO 是需要收发两端同时支持而且共用同一套解决方案才能发挥作用的，也就是不同品牌之间甚至都不兼容，而高通在无线网卡方面市场占有率比较高，加上高通近年来在 MIMO 的研发方面投入了不少精力，颇有造诣，支持高通方案的设备也比较多，所以体验会好很多。最后，尹大人补充了一句 &lt;strong>“QCA9880是世界上最好的无线网卡，那些很牛的路由器都是好几块这个堆起来的”&lt;/strong> ...反正也就贵几十块，好，买！&lt;/p>
&lt;p>买完了大头，还得买些小东西，馈线、天线得买几根，随便下单了几条好看的&lt;/p>
&lt;p>&lt;img alt="order2" src="//blog-assets.keybrl.com/images/router/order2.png" />&lt;/p>
&lt;p>在这期间顺便 Google 了一下那些天线说的什么增益，什么 5dBi 、 6dBi 到底是些啥意思。天线增益嘛，大家直观感觉肯定是增强信号了，那那个多少多少 dBi 肯定是增益的单位嘛，那数值肯定是越大越好了。真的吗？当然不是。其实要说增益是增强信号也不是没有道理，但是这个增强不是通过增加功率做到的，输出功率是由网卡决定的，天线没有任何影响。天线增益的基本原理其实就是改变信号的形状，一般的WiFi天线就是把信号压扁，削弱竖直方向的信号，增强水平方向的信号。那么增益的多少就是由形变量实现的，其实下面这张图已经可以非常清楚地说明了&lt;/p>
&lt;p>&lt;img alt="dbi" src="//blog-assets.keybrl.com/images/router/dbi.jpg" />&lt;/p>
&lt;p>说了那么多，所以我应该挑选多少 dBi 的天线呢？不知道，我瞎挑的，最重要是好看。看了一些文章，看起来 5dBi 挺中规中矩，那就 5dBi 吧。买了3根， 3 * 3 MIMO 嘛。顺便看到一根 3dBi 的挺可爱，也许便携使用时会有用，反正也不贵，顺便买了一根。&lt;/p>
&lt;p>最后是电源，电源这虽然技术含量不高，但是也很重要啊，就某宝随便搜个 DC12V ，然后选个合适的功率。功率可麻烦了，我去查了各种配件的文档，最后算起来最高应该不到 30W 。但是，这个电源不能省，特别是注意到 &lt;strong>硬盘的启动电流是 2A&lt;/strong> ，正常工作电流是 0.8A （都是 12V），这里就会有一个大电流的冲击，如果随便买个 30W （也就是 2.5A ）的电源，那可能硬盘一启动，主板和其他配件就会突然欠压，轻则屏幕黑一下，重则直接关机了。所以我也懒得想了，直接 double ，买了个 60W 的电源。&lt;/p>
&lt;p>那该买的差不多就买完了（个鬼了）...&lt;/p>
&lt;h2 id="_3">拼积木&lt;/h2>
&lt;p>经过几天焦急的等待，东西陆续都到了。首先是某个风和日丽的早晨，内存和SSD到了。&lt;/p>
&lt;p>&lt;img alt="SSD&amp;amp;Memory" src="//blog-assets.keybrl.com/images/router/SSD&amp;amp;Memory.jpg" />&lt;/p>
&lt;p>&lt;img alt="Memory" src="//blog-assets.keybrl.com/images/router/Memory.jpg" />&lt;/p>
&lt;p>&lt;img alt="SSD" src="//blog-assets.keybrl.com/images/router/SSD.jpg" />&lt;/p>
&lt;p>甚至挺好看，但是好像除了吊我胃口，没有任何卵用。&lt;/p>
&lt;p>所幸，内存和SSD到的那天的下午，板子也到了。那起码能开机、装个系统了。&lt;/p>
&lt;p>毫无意外，板子长这样&lt;/p>
&lt;p>&lt;img alt="board front" src="//blog-assets.keybrl.com/images/router/board1.jpg" />&lt;/p>
&lt;p>&lt;img alt="board back" src="//blog-assets.keybrl.com/images/router/board2.jpg" />&lt;/p>
&lt;p>真的毫无意外吗？太意外了好吧，我发现他居然没带散热器！！虽然我在淘宝上看的时候没有看见他有散热器的照片，但是他们家其他板子都有带散热器，我以为只是因为这块CPU在背面所以才看不见，结果一到货彻底傻眼了...赶紧一量尺寸下单了两个散热器，和硅脂&lt;/p>
&lt;p>&lt;img alt="cooler" src="//blog-assets.keybrl.com/images/router/cooler.jpg" />&lt;/p>
&lt;p>两个尺寸是一样的，之所以买两个是因为我看我这U 15W TDP ，人家 J1800 才 10W TDP 散热器都比这个大，这怕是得有风扇才能压住。所以买了个有风扇的（虽然风扇电源接口不合适），但还是不想放弃无风扇散热方案，所以两个都买来试试。硅脂在京东买的，因为刚好发现京东有卖，而且自营的话第二天就能到。&lt;/p>
&lt;p>但是这板子、内存、SSD都齐了，总不能不让我玩吧，所以秉着好死也不能赖活着的原则（我记得原话好像是“好死不如赖活着”来着），在302四处踱步，寻找临时解决方案。功夫不负有心人，在302垃圾堆找到几块闲置的主板，上面有几块小散热片，估计是南桥芯片、北桥芯片什么的，果断拆下来，擦拭干净。&lt;/p>
&lt;p>刚要高兴，发现，电源没到啊。找遍了302也没有发现接口合适的 DC12V 电源。但我看板子上有个奇怪的 4-pin 插座，在正常的电源接口旁边&lt;/p>
&lt;p>&lt;img alt="power" src="//blog-assets.keybrl.com/images/router/power.jpg" />&lt;/p>
&lt;p>而且这个接口和台式机电源引出来的一堆线中的一个看起来可以完美对接，就下面这个&lt;/p>
&lt;p>&lt;img alt="power" src="//blog-assets.keybrl.com/images/router/power-line.jpg" />&lt;/p>
&lt;p>那是不是可以用这个苟一下呢。&lt;/p>
&lt;p>但是，电源可是大事，莽不得，特别是我看尹大人文章时了解了尹大人因为电源问题烧毁了一块塞满数据的硬盘的有趣故事（详情可以看尹大人这篇文章 &lt;a href="https://www.yichya.dev/diy-nas-project-3/">DIY NAS Project (3) Hardware Upgrade &amp;amp; Disaster&lt;/a> ）。于是我去找这板子的规格说明和用户手册，上面是这么说的&lt;/p>
&lt;p>&lt;img alt="power-info" src="//blog-assets.keybrl.com/images/router/power_info.jpg" />&lt;/p>
&lt;p>噢，才疏学浅的我，结合一下 Google 才知道，原来这个东西就是传说中的 ATX 12V 电源接口，那应该是能用的吧。保险起见，我还拿多用电表测了一下电源上几个针脚的电压，看是不是符合说明书上的定义。但其实这样接上还是通不了电的，因为电源上的主输出接口没有输出，电源会以为没有东西接上他。所以我还得在302垃圾堆找到一块没用的主板插上，电源开始工作，然后插上那根 ATX 12V 电源线。压上散热片，按下电源开关，哔~ 的一声...&lt;/p>
&lt;p>&lt;img alt="first-light" src="//blog-assets.keybrl.com/images/router/first_light.jpg" />&lt;/p>
&lt;p>之所以要这样鬼畜地压着散热片，是因为散热片是随便找了块主板拆下来的，规格是不合适的，不能自己固定在这块板子上，而且由于没有硅脂，所以接触非常不紧密，只能通过增加一点压力让他们接触没那么糟糕（事实上还是很糟糕，看后面就知道了）。&lt;/p>
&lt;p>不管怎样，这样能开机了。首先进入 BIOS 看一眼。还行，没有坑我。BIOS 能设置的东西还挺丰富的，甚至主板某些组件的供电电压、时钟频率都可以设置（是不是意味着可以搞搞超频了）。由于过于兴奋，当时没有及时拍照，所以就这样吧，反正 BIOS 也没什么好看。比较有趣的是，BIOS 上可以看见CPU温度，我发现随随便便就能上60摄氏度，手松一点就上到70+，而且才没几分钟，温度还在以肉眼可见的速度缓慢上升，太可怕了。&lt;/p>
&lt;p>看起来，散热就位之前也没法做什么了。但是好死也好过赖活着，作死为什么不做到底呢，怎么说也得让我装个系统看看吧，我还想看看 SSD 擦写次数呢（为了确定没有人坑我），我甚至还想编译个 OpenWrt 呢... 再次去 Intel&amp;reg; 官网看了一眼对于 CPU 温度的描述&lt;/p>
&lt;p>&lt;img alt="temp-limit" src="//blog-assets.keybrl.com/images/router/temp_limit.jpg" />&lt;/p>
&lt;p>看起来只要没到100度就不会死，反正 CPU 也会自己启动保护措施。那么就快动手吧，插上 Ubuntu 装机盘，深吸一口气，开机...&lt;/p>
&lt;p>&lt;img alt="install-ubuntu" src="//blog-assets.keybrl.com/images/router/install_ubuntu1.jpg" />&lt;/p>
&lt;p>&lt;img alt="install-ubuntu" src="//blog-assets.keybrl.com/images/router/install_ubuntu2.jpg" />&lt;/p>
&lt;p>呼，忍着手底的热度，终于完了，幸好是 SSD ，安装个系统不用半个钟。然后我还开机装了几个软件，期间感觉好像也没多热，松了一下手，没过多久，散热片甚至变凉了，凉了！！完全凉了。完全难以理解，我甚至以为是静息时就这个温度，但是很快，我发现我点什么都没有反应了，再过了一会鼠标都不能动了，赶紧强制关机，幸好还能再开机，于是便不敢再玩了。后来也没有想明白怎么回事，也许是 CPU 过热关机了，当时凉得不可思议，就好像关机时的温度一样，几十秒前还是温热的，但是为什么鼠标还可以动呢，难道外设通信不需要CPU干预？为什么没有瞬间黑屏呢，难道显卡还能自己工作？难道显示器有缓存？管他呢...&lt;/p>
&lt;p>第二天，硅脂到了，因为是京东自营嘛，而且电源也在不久后到了，具体是哪一天就忘了。而且无线网卡也到了，无线网卡是最期待的，毕竟我还没摸过这所谓的神卡呢，网卡见下图。虽然散热器没有到，但是有硅脂的话，之前那个小小的散热片也能勉强撑着。甚至开始尝试编译 OpenWrt 。&lt;/p>
&lt;p>&lt;img alt="qca9880" src="//blog-assets.keybrl.com/images/router/qca9880.jpg" />&lt;/p>
&lt;p>虽然天线还没有到，但是，302有一块闲置的 PCI-E 无线网卡，上面有两根天线，而且非常巧，在一个机箱里找到一根悬空的馈线，拆下来，这样就可以接一根网线了。但是，天线怎么固定呢。总不能像尹大人那样随便找个地方拿包装带一扎就当固定了吧。这可是有3根天线，总得齐齐整整摆着吧。然后我发现 PCI-E 挡板非常好用，就这样的东西&lt;/p>
&lt;p>&lt;img alt="pcie-card" src="//blog-assets.keybrl.com/images/router/pcie_wlan.jpg" />&lt;/p>
&lt;p>赶紧拆下来，找个位置拧个螺丝固定住&lt;/p>
&lt;p>&lt;img alt="full1" src="//blog-assets.keybrl.com/images/router/full1.jpg" />&lt;/p>
&lt;p>蓝色的东西是电工胶布，因为会接触到主板上一堆焊点，所以缠点电工胶布避免短路。四个脚是铜柱，把板子垫高，避免压到正面的元件&lt;/p>
&lt;p>&lt;img alt="full2" src="//blog-assets.keybrl.com/images/router/full2.jpg" />&lt;/p>
&lt;p>这扳手、纸巾是编译OpenWrt时热得不行时想出来的方法，扳手下面压的纸巾是湿水的（甚至可以称之为水冷），之所以用扳手是因为那是我当时第一眼看见的最合适的可以压在上面的东西&lt;/p>
&lt;p>&lt;img alt="water cooler" src="//blog-assets.keybrl.com/images/router/water_cooler.jpg" />&lt;/p>
&lt;p>后来天线到了，但3孔位的 PCI-E 挡板没到，所以临时用了块纸板来固定天线（这里要感谢 &lt;a href="https://github.com/virtuoso00">@Virtuoso&lt;/a> 的创意）&lt;/p>
&lt;p>&lt;img alt="full3" src="//blog-assets.keybrl.com/images/router/full3.jpg" />&lt;/p>
&lt;p>&lt;img alt="full4" src="//blog-assets.keybrl.com/images/router/full4.jpg" />&lt;/p>
&lt;p>散热器到了之后就可以把他反过来正面朝上了，天线挡板还是没有到，所以暂时用单天线，用一个回形针固定，还挺可爱&lt;/p>
&lt;p>&lt;img alt="full5" src="//blog-assets.keybrl.com/images/router/full5.jpg" />&lt;/p>
&lt;p>最后所有东西都到了之后，长这样&lt;/p>
&lt;p>&lt;img alt="full8" src="//blog-assets.keybrl.com/images/router/full8.jpg" />&lt;/p>
&lt;p>&lt;img alt="full6" src="//blog-assets.keybrl.com/images/router/full6.jpg" />&lt;/p>
&lt;p>&lt;img alt="full7" src="//blog-assets.keybrl.com/images/router/full7.jpg" />&lt;/p>
&lt;p>插上硬盘，找了个小角落将它安置下来&lt;/p>
&lt;p>&lt;img alt="full9" src="//blog-assets.keybrl.com/images/router/full9.jpg" />&lt;/p>
&lt;p>&lt;img alt="full10" src="//blog-assets.keybrl.com/images/router/full10.jpg" />&lt;/p>
&lt;p>好了，硬件部分就先讲那么多吧，一篇文章太长也会把人看死，也会把我写死。软件部分也是坑巨多，有空我会再写一篇介绍一下这辛酸历程...&lt;/p>
&lt;hr />
&lt;h2 id="_4">略显遗憾&lt;/h2>
&lt;p>最后最后，其实硬盘的固定方案还没有找到合适的，正如你看见的，硬盘就直接摆在旁边。我也有尝试过尹大人的光驱位硬盘架固定法，但是可能也是缺少材料，也不像尹大人那时那样有一堆星火杯小车，所以硬盘架买了我也没找到合适的固定方法。而且对于这个主板来说，硬盘架有点大，看起来不是那么般配。有思考过定制亚克力、定制木板、之类的方案，但是感觉还是略显麻烦，所以暂时也没有付诸实践，日后如果有优雅的方案了会再更...也欢迎大家留言板写下自己的创意...&lt;/p>
&lt;hr />
&lt;p>2018.12.19更新&lt;/p>
&lt;p>目前的解决方案，自己做了个木头的机箱，还能把硬盘架放里面，还有一个炫酷的开关&lt;/p>
&lt;p>&lt;img alt="wood1" src="//blog-assets.keybrl.com/images/router/wood1.jpg" />&lt;/p>
&lt;p>&lt;img alt="wood2" src="//blog-assets.keybrl.com/images/router/wood2.jpg" />&lt;/p>
&lt;p>&lt;img alt="wood3" src="//blog-assets.keybrl.com/images/router/wood3.jpg" />&lt;/p>
&lt;p>&lt;img alt="wood4" src="//blog-assets.keybrl.com/images/router/wood4.jpg" />&lt;/p>
&lt;p>&lt;img alt="wood5" src="//blog-assets.keybrl.com/images/router/wood5.jpg" />&lt;/p>
&lt;p>&lt;img alt="wood6" src="//blog-assets.keybrl.com/images/router/wood6.jpg" />&lt;/p>
&lt;p>&lt;img alt="wood7" src="//blog-assets.keybrl.com/images/router/wood7.jpg" />&lt;/p>
&lt;p>&lt;img alt="wood8" src="//blog-assets.keybrl.com/images/router/wood8.jpg" />&lt;/p></content>
    </entry>

    <entry>
        <title>Windows 常用注册表项</title>
        <link rel="alternate" type="text/html" title="Windows 常用注册表项" href="https://blog.keybrl.com/posts/2018-10-23-Windows-regedit.html"/>
        <id>https://blog.keybrl.com/posts/2018-10-23-Windows-regedit.html</id>
        <updated>2019-02-18T00:00:00+08:00</updated>
        <published>2018-10-23T00:00:00+08:00</published>
        <summary></summary>
        <content type="html" xml:base="https://blog.keybrl.com/posts/2018-10-23-Windows-regedit.html">&lt;h1 id="windows">Windows 常用注册表项&lt;/h1>
&lt;p>不知道为什么，每当涉及到 Windows 系统的的比较复杂的配置时，都会涉及注册表或者组策略的修改，由于 Windows10 Home 没有组策略编辑器，所以我们还是看看注册表吧&lt;/p>
&lt;p>Windows 的注册表，有点像 Linux 的 &lt;code>/etc&lt;/code> 文件夹，里面有各种奇奇怪怪的配置文件，而且 Windows 的明显要奇怪和反人类得多。所以才需要专门记录一下，以备不时之需&lt;/p>
&lt;p>以下是本人平时遇到需要修改注册表时通过搜索引擎获得并搜集整理的一些注册表项的作用的记录，它们对于当时的 Windows 10 是有效的，理论上有可能会失效（特别是如果 Windows 10 还能苟很久的话）。如果你发现部分已经被移除了或者被永久转移了，可以在文章下方留言或者通过邮件联系我（邮箱在本站主页有）&lt;/p>
&lt;hr />
&lt;p>首先是打开注册表编辑器的方法&lt;/p>
&lt;ul>
&lt;li>&lt;code>Windows + R&lt;/code> 打开“运行”，输入 &lt;code>regedit&lt;/code> ，回车&lt;/li>
&lt;li>在“开始”菜单的搜索栏搜索“注册表编辑器”&lt;/li>
&lt;li>问小娜&lt;/li>
&lt;/ul>
&lt;h2 id="_1">在文件资源管理器中的右键菜单&lt;/h2>
&lt;p>有时候可能因为安装无聊软件时忘了取消勾选什么，或者某些软件没卵用被卸载了，或者其他各种历史原因，右键菜单塞满了你不希望看见的选项，比如 “使用360强力删除”。修改或删除以下注册表项可以编辑你在文件资源管理器中的右键菜单。&lt;/p>
&lt;ul>
&lt;li>右键文件 &lt;code>HKEY_CLASSES_ROOT\&lt;/code>&lt;/li>
&lt;li>所有类型的文件 &lt;code>*\shell\&lt;/code> 和 &lt;code>*\shellex\ContextMenuHandlers\&lt;/code>&lt;/li>
&lt;li>&lt;code>.hhh&lt;/code> 类型的文件 &lt;code>.hhh\shell\&lt;/code> 和 &lt;code>.hhh\shellex\ContextMenuHandlers\&lt;/code> （一般不存在 &lt;code>.hhh&lt;/code> ，这只是个代称，它可以是 &lt;code>.mp4&lt;/code> 、 &lt;code>.jpeg&lt;/code> ...）&lt;/li>
&lt;li>右键文件夹 &lt;code>HKEY_CLASSES_ROOT\Directory\&lt;/code>&lt;/li>
&lt;li>文件夹空白处 &lt;code>Background\shell\&lt;/code> 和 &lt;code>Background\shellex\ContextMenuHandlers\&lt;/code>&lt;/li>
&lt;li>文件夹图标 &lt;code>shell\&lt;/code> 和 &lt;code>shellex\ContextMenuHandlers\&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="_2">修改用户文件目录&lt;/h2>
&lt;p>Windows 默认的用户文件目录一般是这样的 C:\Users\username\ 。默认情况下这个 &lt;code>username&lt;/code> ，如果是本地用户就是本地用户的用户名，创建用户时设置的；如果是 Windows 10 刚装好后第一次开机时按照指引登录了微软账户，那么会截取微软账户账号的前五个字母，比如说：我的微软账号是 &lt;code>keyboard-l@outlook.com&lt;/code> 那么 Windows 10 会截取 &lt;code>keybo&lt;/code> 作为用户目录的文件夹名，这十分扯淡。&lt;/p>
&lt;p>开始的时候我是没什么所谓的，毕竟一般人也不会经常看见自己的用户目录，直到有一天我打开终端（CMD 或者 PowerShell）。终端的默认工作路径就在自己的用户目录（下图是已经改过来了）&lt;/p>
&lt;p>&lt;img alt="PowerShell" src="//blog-assets.keybrl.com/images/Windows-regedit/powershell.jpg" />&lt;/p>
&lt;p>那么如果用户目录不喜欢怎么办呢。首先需要修改注册表，修改系统的用户目录。&lt;/p>
&lt;p>注册表路径 &lt;code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Profilelist&lt;/code> 下的各注册表的表项 &lt;code>ProfileImagePath&lt;/code> 的值就是用户目录，找到自己用户那一个，修改为自己喜欢的，然后重启。重启后会提示用户目录不存在，因为原来的用户目录下的文件路径没变，去修改 C:\Users\ 下的文件夹名，再重启（或者注销），完成。&lt;/p>
&lt;h2 id="_3">修改终端默认代码页&lt;/h2>
&lt;p>无论是使用 CMD 还是 PowerShell ，大家都会有一个烦恼，那就是中文时，默认字体是新宋体，虽然可以设置字体，但是可以选择的字体非常少。而且终端默认使用代码页 &lt;code>936&lt;/code> ， GBK 编码，这时常导致麻烦。在终端输入 &lt;code>chcp 65001&lt;/code> 可以将代码页切换到 UTF-8 编码的代码页，这时显示是英文，而且可以换各种英文字体，比如漂亮的 &lt;code>Consolas&lt;/code> 。但是这样的修改是不可持久化的，下次再打开还是原来那样。所以有什么办法，修改默认的代码页呢，让它一启动就是代码页 &lt;code>65001&lt;/code> 。&lt;/p>
&lt;p>注册表 &lt;code>HKEY_CURRENT_USER\Console\%SystemRoot%_System32_WindowsPowerShell_v1.0_powershell.exe&lt;/code> 下的 &lt;code>CodePage&lt;/code> ，将 &lt;code>936&lt;/code> 改为 &lt;code>65001&lt;/code> 就可以了。不过这个只对 Windows + R 弹出“运行”对话框，输入 powershell ，这样打开的 PowerShell 有用。无论是对保存的 PowerShell 的快捷方式还是对右键 Windows 徽标中的 &lt;code>Windows PowerShell&lt;/code> 都是无效的，目前我还没有找到解决方法。而且代码页 &lt;code>65001&lt;/code> 也不是完美的，在 PowerShell 中，显示中文会只有一个字符宽（正常应该是两个字符宽），导致显示不全，在 CMD 中则没有这个问题，这个目前我也没有找到解决方法。&lt;/p></content>
    </entry>

    <entry>
        <title>keybrl-mines - 优雅的扫雷从此无处不在</title>
        <link rel="alternate" type="text/html" title="keybrl-mines - 优雅的扫雷从此无处不在" href="https://blog.keybrl.com/projects/2018-10-14-Project-keybrl-mines.html"/>
        <id>https://blog.keybrl.com/projects/2018-10-14-Project-keybrl-mines.html</id>
        <updated>2018-10-14T00:00:01+08:00</updated>
        <published>2018-10-14T00:00:01+08:00</published>
        <summary></summary>
        <content type="html" xml:base="https://blog.keybrl.com/projects/2018-10-14-Project-keybrl-mines.html">&lt;h1 id="keybrl-mines-">keybrl-mines - 优雅的扫雷从此无处不在&lt;/h1>
&lt;p>&lt;strong>该项目未完成！！&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>项目地址：&lt;a href="https://github.com/keybrl/keybrl-mines/">keybrl/keybrl-mines&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>点击链接开始游戏 &lt;a href="https://mines.keybrl.com/">https://mines.keybrl.com/&lt;/a>&lt;/p>
&lt;p>&lt;em>通过浏览器，畅玩经典游戏，从雷区中清除隐藏的地雷&lt;/em>&lt;/p>
&lt;hr />
&lt;p>我过去很多项目都是从我的爱好出发而开始的。 keybrl-mines 也不例外，扫雷非常有趣，而且它不像 Tetris （我特别喜欢的另一个游戏） 那么刺激，适合安静的时候玩，而且随时可以停止去干别的事情。所以，下载大的代码库，编译大的项目，往嵌入式设备刷写系统，上机前等待老师出现等无聊的时间，就非常适合玩扫雷。Tetris 我已经实现过一个了，C语言写的在 Windows 命令行运行的小游戏，很简陋，甚至不能 T-Spin ，但是我实现了。而扫雷我没有写过，就连C语言命令行版的扫雷都没有写过，这就很遗憾了。扫雷比 Tetris 容易太多，讲道理我应该要写一个的，所以现在它来了...&lt;/p>
&lt;h2 id="gnome-mines">复刻 gnome-mines&lt;/h2>
&lt;blockquote>
&lt;p>Clear hidden mines from a minefield&lt;/p>
&lt;/blockquote>
&lt;p>使用过 &lt;a href="https://www.ubuntu.com/global">Ubuntu Desktop&lt;/a> 的同学都知道，“常规安装”的情况下 Ubuntu Deskdop 自带一个 &lt;a href="https://www.gnome.org/">GNOME&lt;/a> 桌面的小游戏 &lt;code>gnome-mines&lt;/code> ，中文一般叫“扫雷”。即使你的Linux发行版默认不安装这个游戏也没有关系，你可以使用 &lt;code>apt&lt;/code> 轻松安装它（如果你的发行版使用apt作为包管理工具的话），只需在终端输入如下命令。&lt;/p>
&lt;div class="codehilite">&lt;pre>&lt;span>&lt;/span>sudo apt install gnome-mines
&lt;/pre>&lt;/div>


&lt;p>即使你不能使用 apt ，你也可以通过求助你的社区获得解决方案，或者直接加入信奉 Debian 的阵营，比如换用 Ubuntu Desktop 作为你的桌面端 Linux 系统。&lt;/p>
&lt;p>扫雷是非常有趣的。Microsoft Windows 已经在 Windows 10 中移除了原本在 Windows XP /7 中自带的扫雷游戏，而且现在在 Windows 平台已经很难找到一个外观上能看的扫雷游戏了。而 Ubuntu Desktop 默认安装的 gnome-mines 界面朴素优雅，交互动画丰富又恰到好处，成了我玩扫雷的最佳选择。&lt;/p>
&lt;p>但是，我并不总是使用 Linux 的桌面系统，当我回到 Windows 的世界，问题仍然存在，我仍然找不到一个合适的扫雷游戏。&lt;/p>
&lt;p>这就是我想要开启这个项目的原因，我想要实现一个跨平台的，像 gnome-mines 般优雅的扫雷游戏，我暂时把它起名叫 &lt;code>keybrl-mines&lt;/code>。&lt;/p>
&lt;p>当你看见这个游戏的成品，你可能会觉得他完全就是 gnome-mines 的样子。如果真是这样，那我就成功了，事实上，我从一开始就打算让我的项目完全复刻 gnome-mines 的体验，尽管平台不同，很多细节难以做到一模一样，但我还是尽可能让他们相似。甚至这个项目中很多图片、图标都是直接从 gnome-mines 的项目仓库中搬过来的（如果我没有错误理解 GPLv3 的含义的话，我这么做应该是完全合法的）。&lt;/p>
&lt;p>&lt;img alt="gnome-mines 和 keybrl-mines 的比较" src="//keybrl-webapp.oss-cn-shenzhen.aliyuncs.com/keybrl-mines/image/compare.png" title="gnome-mines 和 keybrl-mines 的比较" />&lt;/p>
&lt;p>无论如何，gnome-mines 是一个非常棒的游戏。不管你觉得我的 keybrl-mines 体验如何，我都建议你尝试一下 gnome-mines ，最简单的方法就如上面说的，安装一个 Ubuntu Desktop。或者看看这个项目，到它的Github仓库（&lt;a href="https://github.com/GNOME/gnome-mines">GNOME/gnome-mines&lt;/a>）中点个 Star。&lt;/p>
&lt;h2 id="keybrl-mines">为什么是 keybrl-mines&lt;/h2>
&lt;p>说实话，在我几乎还没有思考这个游戏的实现细节的时候，我首先思考的就是这个项目的名字，这十分有挑战性。我过去的项目大都十分无聊，仅仅为了满足我的某些奇怪癖好，而且只是写着玩玩，比如&lt;a href="https://github.com/keybrl/Coin">keybrl/Coin&lt;/a>。相比之下，我觉得扫雷这个项目不是无聊的，尽管它仍然是为了满足我的奇怪癖好，而且我有预感它会得到不少关注，因为我知道有很多人喜欢玩这个小游戏，而且像我一样在 Windows 平台很难找到合适的版本。所以起一个恰当的好名字就非常重要。&lt;/p>
&lt;p>我不能简单地将它命名为 &lt;code>Mine Sweeper&lt;/code> ，因为扫雷是一个历史悠久的游戏，多年来各种版本层出不穷，如果我简单的命名为 “Mine sweeper” 、 “扫雷” 或者 “Mines” 什么的，那我仿佛在宣称我的项目才是扫雷的标准，事实上这十分自以为是。所以首先我想到的是 &lt;code>web-mines&lt;/code> 因为我几乎是打算复刻 gnome-mines ，而我的项目是运行在 Web 平台的，所以模仿 gnome-mines 的命名就非常合适。但是 “web” 是一个含义很广的词，看起来还不如 &lt;code>www-mines&lt;/code> 明确。但不管是 “web-mines” 还是 “www-mines” ，都有一个问题， Web 不是我发明的，随随便便冠以 “Web” 的名头，是不是显得太自以为是，而且同样有企图宣称我的项目是 Web 平台上扫雷的标准的嫌疑。&lt;/p>
&lt;p>所以，经过若干小时的思考，我认为 “gnome-mines” 的 “gnome” 除了是一个桌面平台，也可以理解为是作者（尽管作者不止一人），也就是 “gnome 写的 mines” 的意思。如果是这样，那我带上我的 id 似乎就非常不错，低调，而且万一以后火了大家还能轻易看出是谁写的，所以就有了目前这个项目名 &lt;code>keybrl-mines&lt;/code>。&lt;/p></content>
    </entry>
</feed>
